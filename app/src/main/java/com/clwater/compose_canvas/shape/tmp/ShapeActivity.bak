package com.clwater.compose_canvas.shape

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawWithCache
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalLayoutDirection
import androidx.compose.ui.unit.LayoutDirection
import androidx.compose.ui.unit.dp
import androidx.graphics.shapes.Cubic
import androidx.graphics.shapes.Morph
import androidx.graphics.shapes.RoundedPolygon
import androidx.graphics.shapes.star
import com.clwater.compose_canvas.shape.tmp.toComposePath
import com.clwater.compose_canvas.ui.theme.AndroidComposeCanvasTheme

class ShapeActivity : ComponentActivity() {
    companion object {
        fun start(activity: ComponentActivity) {
            activity.startActivity(Intent(activity, ShapeActivity::class.java))
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AndroidComposeCanvasTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background,
                ) {
                    CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Ltr) {
                        ShapeCustoms()
                    }
                }
            }
        }
    }

    @Composable
    fun ShapeCustoms() {
        val configuration = LocalConfiguration.current
        val screenWidth = configuration.screenWidthDp.dp
        val screenHeight = configuration.screenHeightDp.dp

        val shapeParams_1 = remember {
            mutableStateOf(
                ShapeParams(5)
            )
        }

        val shapeParams_2 = remember {
            mutableStateOf(
                ShapeParams(10)
            )
        }

        val animatedProcessManual = remember {
            mutableStateOf(0f)
        }


        val convertShapeMode = remember {
            mutableStateOf(ConvertShapeMode.Manual)
        }


        val shapeSize = Size(screenWidth.value / 2f, screenWidth.value / 2f)


        val infiniteTransition = rememberInfiniteTransition("infinite outline movement")
        val animatedProgress = infiniteTransition.animateFloat(
            initialValue = 0f, targetValue = 1f, animationSpec = infiniteRepeatable(
                tween(2000, easing = LinearEasing), repeatMode = RepeatMode.Reverse
            ), label = "animatedMorphProgress"
        )


        val startPolygon = RoundedPolygon(
            numVertices = shapeParams_1.value.vertices,
            radius = shapeSize.minDimension,
            centerX = shapeSize.width,
            centerY = shapeSize.height
        )
        val endPolygon = RoundedPolygon.star(
            numVerticesPerRadius = 5,
//            numVertices = shapeParams_2.value.vertices,
            radius = shapeSize.minDimension,
            centerX = shapeSize.width,
            centerY = shapeSize.height
        )



        Column(
            modifier = Modifier
                .padding(8.dp)
                .verticalScroll(rememberScrollState())
        ) {
            Column(

            ) {
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Box(modifier = Modifier
                        .height(shapeSize.height.dp)
                        .offset(x = -shapeSize.width.dp / 2f)
                        .drawWithCache {
                            val morph = Morph(start = startPolygon, end = endPolygon)
                            val morphPath = morph.toComposePath(
                                progress = if (convertShapeMode.value == ConvertShapeMode.Auto) {
                                    animatedProgress.value
                                } else {
                                    animatedProcessManual.value
                                }
                            )

                            onDrawBehind {
                                drawPath(morphPath, color = Color.Black)
                            }
                        })
                }


                Row {
                    Slider(
                        enabled = convertShapeMode.value == ConvertShapeMode.Manual,
                        value = if (convertShapeMode.value == ConvertShapeMode.Auto) {
                            animatedProgress.value
                        } else {
                            animatedProcessManual.value
                        },
                        onValueChange = {
                            if (convertShapeMode.value == ConvertShapeMode.Manual) {
                                animatedProcessManual.value = it
                            }
                        },
                        modifier = Modifier.weight(3f),
                        steps = 100,
                    )

                    Button(modifier = Modifier.weight(1.5f), onClick = {
                        convertShapeMode.value = ConvertShapeMode.convert(convertShapeMode.value)
                    }) {
                        Text(text = "" + convertShapeMode.value)
                        if (convertShapeMode.value  == ConvertShapeMode.Manual) {
                            Icon(imageVector = Icons.Filled.PlayArrow, contentDescription = "")
                        }
                    }
                }
            }

            Row {
                Box(modifier = Modifier
                    .height(screenWidth / 2f)
                    .weight(1f)
                    .drawWithCache {

                        val roundedPolygonPath = startPolygon.cubics.toPath()
                        onDrawBehind {
                            drawPath(roundedPolygonPath, color = Color.Blue)
                        }
                    })
                Box(modifier = Modifier
                    .height(screenWidth / 2f)
                    .weight(1f)
                    .drawWithCache {
                        val roundedPolygonPath = endPolygon.cubics.toPath()
                        onDrawBehind {
                            drawPath(roundedPolygonPath, color = Color.Blue)
                        }
                    })
            }
        }
    }


    data class ShapeParams(var vertices: Int)
    enum class ConvertShapeMode {
        Auto, Manual;

        companion object {
            fun convert(value: ConvertShapeMode): ConvertShapeMode {
                return if (value == Auto) {
                    Manual
                } else {
                    Auto
                }
            }
        }
    }


    fun List<Cubic>.toPath(path: Path = Path(), scale: Float = 1f): Path {
        path.rewind()
        firstOrNull()?.let { first ->
            path.moveTo(first.anchor0X * scale, first.anchor0Y * scale)
        }
        for (bezier in this) {
            path.cubicTo(
                bezier.control0X * scale,
                bezier.control0Y * scale,
                bezier.control1X * scale,
                bezier.control1Y * scale,
                bezier.anchor1X * scale,
                bezier.anchor1Y * scale
            )
        }
        path.close()
        return path
    }
}